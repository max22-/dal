@string-to-tree ( str* tree* -- )
    STH2k reset-tree
    #0000 .type/LIST #0000 STH2kr add-node
    &loop ( str* -: str* ) LDAk #00 EQU ?&end
    LDAk #00 SWP ( transform char into short ) .type/CHARACTER #0000 STH2kr add-node
    INC2 !&loop
    &end
    POP2
    POP2r
    JMP2r

@reset-tree ( tree* -: )
    #0000 SWP2 ;tree/node-count ADD2 STA2
    JMP2r

@add-node ( data* type parent* tree* -: )
    STH2k
    DUP2 get-node-count get-node
    ( data* type parent* node-address -- )
    STH2k
    ;node/parent ADD2 STA2
    STH2kr
    ;node/type ADD2 STA
    STH2kr
    ;node/data ADD2 STA2
    POP2r
    STH2kr get-node-count INC2 STH2r ;tree/node-count ADD2 STA2
    JMP2r

@get-node ( tree* node-id* -: node-address* )
    ;node/node-length MUL2 ;tree/nodes ADD2 ADD2
    JMP2r

@get-node-data ( tree* node-id* -: node-data* )
    get-node ;node/data ADD2 LDA2
    JMP2r

@get-node-type ( tree* node-id* -: node-type )
    get-node ;node/type ADD2 LDA
    JMP2r

@get-node-parent ( tree* node-id* -: node-parent* )
    get-node ;node/parent ADD2 LDA2
    JMP2r

@get-node-count ( tree* -: node-count* )
    ;tree/node-count ADD2 LDA2
    JMP2r

@get-node-depth ( *tree *node-id -- depth* )
    ( BREAKPOINT )
    SWP2 ,&tree STR2
    #0000 ,&counter STR2
    
    ( node-id* -- )
    &loop
    DUP2 LIT2 &tree $2 SWP2 get-node-parent
    ( old-node-id* node-id* -- )
    DUP2 ROT2 EQU2 ?&end
    ,&counter LDR2 INC2 ,&counter STR2 !&loop
    &end
    POP2
    ,&counter LDR2
    JMP2r
    &counter 0000

@indent ( depth* -- )
    &loop
    DUP2 #0000 EQU2 ?&end
    ;&indent-str print-string
    #ffff ADD2
    !&loop
    &end
    POP2
    JMP2r
    &indent-str 20 20 20 20 $1
    

@print-tree ( tree* -- )
    STH2k
    get-node-count DUP2 print-short-decimal ;&nodes-msg print-string
    ( node-count* -- )
    ,&node-count STR2
    #0000
    &loop
    DUP2 LIT2 &node-count $2 EQU2 ?&end
    STH2kr OVR2 get-node-depth indent
    STH2kr OVR2 print-node #0a #18 DEO
    INC2 !&loop
    &end
    POP2
    POP2r
    JMP2r
    &nodes-msg 20 "nodes 0a $1

@print-node ( tree* node-number* -- )
    ( BREAKPOINT )
    STH2 STH2 STH2kr SWP2r STH2kr SWP2r ( make a copy of the arguments on the return stack )
    get-node-type

    DUP .type/LIST NEQ ?&not-list 
    ;&list-str print-string
    !&end
    &not-list

    DUP .type/CHARACTER NEQ ?&not-char
    STH2kr SWP2r STH2kr SWP2r ( get the arguments from the return stack )
    get-node-data SWP POP .Console/write DEO
    !&end
    &not-char

    DUP .type/LEFT_BRACKET NEQ ?&not-left-bracket
    ;&left-bracket-str print-string
    !&end
    &not-left-bracket

    DUP .type/RIGHT_BRACKET NEQ ?&not-right-bracket
    ;&right-bracket-str print-string
    !&end
    &not-right-bracket

    DUP .type/INTEGER NEQ ?&not-integer
    STH2kr SWP2r STH2kr SWP2r ( get the arguments from the return stack )
    get-node-data print-short-decimal
    !&end
    &not-integer

    &end
    POP ( pop node type )
    POP2r POP2r ( pop the stashed tree* and node-number* arguments )
    JMP2r
    &list-str "LIST $1
    &left-bracket-str "LEFT_BRACKET $1
    &right-bracket-str "RIGHT_BRACKET $1